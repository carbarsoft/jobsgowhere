// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// JobSeeker is an object representing the database table.
type JobSeeker struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	PersonID    string      `boil:"person_id" json:"person_id" toml:"person_id" yaml:"person_id"`
	Title       string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Headline    null.String `boil:"headline" json:"headline,omitempty" toml:"headline" yaml:"headline,omitempty"`
	City        null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	SeekingMode null.Int    `boil:"seeking_mode" json:"seeking_mode,omitempty" toml:"seeking_mode" yaml:"seeking_mode,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *jobSeekerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L jobSeekerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JobSeekerColumns = struct {
	ID          string
	PersonID    string
	Title       string
	Headline    string
	City        string
	SeekingMode string
	CreatedAt   string
}{
	ID:          "id",
	PersonID:    "person_id",
	Title:       "title",
	Headline:    "headline",
	City:        "city",
	SeekingMode: "seeking_mode",
	CreatedAt:   "created_at",
}

// Generated where

var JobSeekerWhere = struct {
	ID          whereHelperstring
	PersonID    whereHelperstring
	Title       whereHelperstring
	Headline    whereHelpernull_String
	City        whereHelpernull_String
	SeekingMode whereHelpernull_Int
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"job_seeker\".\"id\""},
	PersonID:    whereHelperstring{field: "\"job_seeker\".\"person_id\""},
	Title:       whereHelperstring{field: "\"job_seeker\".\"title\""},
	Headline:    whereHelpernull_String{field: "\"job_seeker\".\"headline\""},
	City:        whereHelpernull_String{field: "\"job_seeker\".\"city\""},
	SeekingMode: whereHelpernull_Int{field: "\"job_seeker\".\"seeking_mode\""},
	CreatedAt:   whereHelpertime_Time{field: "\"job_seeker\".\"created_at\""},
}

// JobSeekerRels is where relationship names are stored.
var JobSeekerRels = struct {
	Person string
}{
	Person: "Person",
}

// jobSeekerR is where relationships are stored.
type jobSeekerR struct {
	Person *Person `boil:"Person" json:"Person" toml:"Person" yaml:"Person"`
}

// NewStruct creates a new relationship struct
func (*jobSeekerR) NewStruct() *jobSeekerR {
	return &jobSeekerR{}
}

// jobSeekerL is where Load methods for each relationship are stored.
type jobSeekerL struct{}

var (
	jobSeekerAllColumns            = []string{"id", "person_id", "title", "headline", "city", "seeking_mode", "created_at"}
	jobSeekerColumnsWithoutDefault = []string{"id", "person_id", "title", "headline", "city", "seeking_mode", "created_at"}
	jobSeekerColumnsWithDefault    = []string{}
	jobSeekerPrimaryKeyColumns     = []string{"id"}
)

type (
	// JobSeekerSlice is an alias for a slice of pointers to JobSeeker.
	// This should generally be used opposed to []JobSeeker.
	JobSeekerSlice []*JobSeeker
	// JobSeekerHook is the signature for custom JobSeeker hook methods
	JobSeekerHook func(context.Context, boil.ContextExecutor, *JobSeeker) error

	jobSeekerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	jobSeekerType                 = reflect.TypeOf(&JobSeeker{})
	jobSeekerMapping              = queries.MakeStructMapping(jobSeekerType)
	jobSeekerPrimaryKeyMapping, _ = queries.BindMapping(jobSeekerType, jobSeekerMapping, jobSeekerPrimaryKeyColumns)
	jobSeekerInsertCacheMut       sync.RWMutex
	jobSeekerInsertCache          = make(map[string]insertCache)
	jobSeekerUpdateCacheMut       sync.RWMutex
	jobSeekerUpdateCache          = make(map[string]updateCache)
	jobSeekerUpsertCacheMut       sync.RWMutex
	jobSeekerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var jobSeekerBeforeInsertHooks []JobSeekerHook
var jobSeekerBeforeUpdateHooks []JobSeekerHook
var jobSeekerBeforeDeleteHooks []JobSeekerHook
var jobSeekerBeforeUpsertHooks []JobSeekerHook

var jobSeekerAfterInsertHooks []JobSeekerHook
var jobSeekerAfterSelectHooks []JobSeekerHook
var jobSeekerAfterUpdateHooks []JobSeekerHook
var jobSeekerAfterDeleteHooks []JobSeekerHook
var jobSeekerAfterUpsertHooks []JobSeekerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *JobSeeker) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *JobSeeker) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *JobSeeker) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *JobSeeker) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *JobSeeker) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *JobSeeker) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *JobSeeker) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *JobSeeker) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *JobSeeker) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddJobSeekerHook registers your hook function for all future operations.
func AddJobSeekerHook(hookPoint boil.HookPoint, jobSeekerHook JobSeekerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		jobSeekerBeforeInsertHooks = append(jobSeekerBeforeInsertHooks, jobSeekerHook)
	case boil.BeforeUpdateHook:
		jobSeekerBeforeUpdateHooks = append(jobSeekerBeforeUpdateHooks, jobSeekerHook)
	case boil.BeforeDeleteHook:
		jobSeekerBeforeDeleteHooks = append(jobSeekerBeforeDeleteHooks, jobSeekerHook)
	case boil.BeforeUpsertHook:
		jobSeekerBeforeUpsertHooks = append(jobSeekerBeforeUpsertHooks, jobSeekerHook)
	case boil.AfterInsertHook:
		jobSeekerAfterInsertHooks = append(jobSeekerAfterInsertHooks, jobSeekerHook)
	case boil.AfterSelectHook:
		jobSeekerAfterSelectHooks = append(jobSeekerAfterSelectHooks, jobSeekerHook)
	case boil.AfterUpdateHook:
		jobSeekerAfterUpdateHooks = append(jobSeekerAfterUpdateHooks, jobSeekerHook)
	case boil.AfterDeleteHook:
		jobSeekerAfterDeleteHooks = append(jobSeekerAfterDeleteHooks, jobSeekerHook)
	case boil.AfterUpsertHook:
		jobSeekerAfterUpsertHooks = append(jobSeekerAfterUpsertHooks, jobSeekerHook)
	}
}

// One returns a single jobSeeker record from the query.
func (q jobSeekerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*JobSeeker, error) {
	o := &JobSeeker{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for job_seeker")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all JobSeeker records from the query.
func (q jobSeekerQuery) All(ctx context.Context, exec boil.ContextExecutor) (JobSeekerSlice, error) {
	var o []*JobSeeker

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to JobSeeker slice")
	}

	if len(jobSeekerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all JobSeeker records in the query.
func (q jobSeekerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count job_seeker rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q jobSeekerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if job_seeker exists")
	}

	return count > 0, nil
}

// Person pointed to by the foreign key.
func (o *JobSeeker) Person(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PersonID),
	}

	queryMods = append(queryMods, mods...)

	query := People(queryMods...)
	queries.SetFrom(query.Query, "\"person\"")

	return query
}

// LoadPerson allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jobSeekerL) LoadPerson(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJobSeeker interface{}, mods queries.Applicator) error {
	var slice []*JobSeeker
	var object *JobSeeker

	if singular {
		object = maybeJobSeeker.(*JobSeeker)
	} else {
		slice = *maybeJobSeeker.(*[]*JobSeeker)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jobSeekerR{}
		}
		args = append(args, object.PersonID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jobSeekerR{}
			}

			for _, a := range args {
				if a == obj.PersonID {
					continue Outer
				}
			}

			args = append(args, obj.PersonID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`person`),
		qm.WhereIn(`person.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for person")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for person")
	}

	if len(jobSeekerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Person = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.JobSeekers = append(foreign.R.JobSeekers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PersonID == foreign.ID {
				local.R.Person = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.JobSeekers = append(foreign.R.JobSeekers, local)
				break
			}
		}
	}

	return nil
}

// SetPerson of the jobSeeker to the related item.
// Sets o.R.Person to related.
// Adds o to related.R.JobSeekers.
func (o *JobSeeker) SetPerson(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"job_seeker\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"person_id"}),
		strmangle.WhereClause("\"", "\"", 2, jobSeekerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PersonID = related.ID
	if o.R == nil {
		o.R = &jobSeekerR{
			Person: related,
		}
	} else {
		o.R.Person = related
	}

	if related.R == nil {
		related.R = &personR{
			JobSeekers: JobSeekerSlice{o},
		}
	} else {
		related.R.JobSeekers = append(related.R.JobSeekers, o)
	}

	return nil
}

// JobSeekers retrieves all the records using an executor.
func JobSeekers(mods ...qm.QueryMod) jobSeekerQuery {
	mods = append(mods, qm.From("\"job_seeker\""))
	return jobSeekerQuery{NewQuery(mods...)}
}

// FindJobSeeker retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJobSeeker(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*JobSeeker, error) {
	jobSeekerObj := &JobSeeker{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"job_seeker\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, jobSeekerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from job_seeker")
	}

	return jobSeekerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *JobSeeker) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no job_seeker provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jobSeekerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	jobSeekerInsertCacheMut.RLock()
	cache, cached := jobSeekerInsertCache[key]
	jobSeekerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			jobSeekerAllColumns,
			jobSeekerColumnsWithDefault,
			jobSeekerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(jobSeekerType, jobSeekerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(jobSeekerType, jobSeekerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"job_seeker\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"job_seeker\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into job_seeker")
	}

	if !cached {
		jobSeekerInsertCacheMut.Lock()
		jobSeekerInsertCache[key] = cache
		jobSeekerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the JobSeeker.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *JobSeeker) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	jobSeekerUpdateCacheMut.RLock()
	cache, cached := jobSeekerUpdateCache[key]
	jobSeekerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			jobSeekerAllColumns,
			jobSeekerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update job_seeker, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"job_seeker\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, jobSeekerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(jobSeekerType, jobSeekerMapping, append(wl, jobSeekerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update job_seeker row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for job_seeker")
	}

	if !cached {
		jobSeekerUpdateCacheMut.Lock()
		jobSeekerUpdateCache[key] = cache
		jobSeekerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q jobSeekerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for job_seeker")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for job_seeker")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JobSeekerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobSeekerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"job_seeker\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, jobSeekerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in jobSeeker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all jobSeeker")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *JobSeeker) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no job_seeker provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jobSeekerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	jobSeekerUpsertCacheMut.RLock()
	cache, cached := jobSeekerUpsertCache[key]
	jobSeekerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			jobSeekerAllColumns,
			jobSeekerColumnsWithDefault,
			jobSeekerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			jobSeekerAllColumns,
			jobSeekerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert job_seeker, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(jobSeekerPrimaryKeyColumns))
			copy(conflict, jobSeekerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"job_seeker\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(jobSeekerType, jobSeekerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(jobSeekerType, jobSeekerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert job_seeker")
	}

	if !cached {
		jobSeekerUpsertCacheMut.Lock()
		jobSeekerUpsertCache[key] = cache
		jobSeekerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single JobSeeker record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *JobSeeker) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no JobSeeker provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), jobSeekerPrimaryKeyMapping)
	sql := "DELETE FROM \"job_seeker\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from job_seeker")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for job_seeker")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q jobSeekerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no jobSeekerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from job_seeker")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for job_seeker")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JobSeekerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(jobSeekerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobSeekerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"job_seeker\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jobSeekerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from jobSeeker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for job_seeker")
	}

	if len(jobSeekerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *JobSeeker) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJobSeeker(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JobSeekerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JobSeekerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobSeekerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"job_seeker\".* FROM \"job_seeker\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jobSeekerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in JobSeekerSlice")
	}

	*o = slice

	return nil
}

// JobSeekerExists checks if the JobSeeker row exists.
func JobSeekerExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"job_seeker\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if job_seeker exists")
	}

	return exists, nil
}
