// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// JobSeekerFav is an object representing the database table.
type JobSeekerFav struct {
	ID       string `boil:"id" json:"id" toml:"id" yaml:"id"`
	PersonID string `boil:"person_id" json:"person_id" toml:"person_id" yaml:"person_id"`
	JobID    string `boil:"job_id" json:"job_id" toml:"job_id" yaml:"job_id"`

	R *jobSeekerFavR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L jobSeekerFavL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JobSeekerFavColumns = struct {
	ID       string
	PersonID string
	JobID    string
}{
	ID:       "id",
	PersonID: "person_id",
	JobID:    "job_id",
}

// Generated where

var JobSeekerFavWhere = struct {
	ID       whereHelperstring
	PersonID whereHelperstring
	JobID    whereHelperstring
}{
	ID:       whereHelperstring{field: "\"job_seeker_fav\".\"id\""},
	PersonID: whereHelperstring{field: "\"job_seeker_fav\".\"person_id\""},
	JobID:    whereHelperstring{field: "\"job_seeker_fav\".\"job_id\""},
}

// JobSeekerFavRels is where relationship names are stored.
var JobSeekerFavRels = struct {
	Job    string
	Person string
}{
	Job:    "Job",
	Person: "Person",
}

// jobSeekerFavR is where relationships are stored.
type jobSeekerFavR struct {
	Job    *Job    `boil:"Job" json:"Job" toml:"Job" yaml:"Job"`
	Person *Person `boil:"Person" json:"Person" toml:"Person" yaml:"Person"`
}

// NewStruct creates a new relationship struct
func (*jobSeekerFavR) NewStruct() *jobSeekerFavR {
	return &jobSeekerFavR{}
}

// jobSeekerFavL is where Load methods for each relationship are stored.
type jobSeekerFavL struct{}

var (
	jobSeekerFavAllColumns            = []string{"id", "person_id", "job_id"}
	jobSeekerFavColumnsWithoutDefault = []string{"id", "person_id", "job_id"}
	jobSeekerFavColumnsWithDefault    = []string{}
	jobSeekerFavPrimaryKeyColumns     = []string{"id"}
)

type (
	// JobSeekerFavSlice is an alias for a slice of pointers to JobSeekerFav.
	// This should generally be used opposed to []JobSeekerFav.
	JobSeekerFavSlice []*JobSeekerFav
	// JobSeekerFavHook is the signature for custom JobSeekerFav hook methods
	JobSeekerFavHook func(context.Context, boil.ContextExecutor, *JobSeekerFav) error

	jobSeekerFavQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	jobSeekerFavType                 = reflect.TypeOf(&JobSeekerFav{})
	jobSeekerFavMapping              = queries.MakeStructMapping(jobSeekerFavType)
	jobSeekerFavPrimaryKeyMapping, _ = queries.BindMapping(jobSeekerFavType, jobSeekerFavMapping, jobSeekerFavPrimaryKeyColumns)
	jobSeekerFavInsertCacheMut       sync.RWMutex
	jobSeekerFavInsertCache          = make(map[string]insertCache)
	jobSeekerFavUpdateCacheMut       sync.RWMutex
	jobSeekerFavUpdateCache          = make(map[string]updateCache)
	jobSeekerFavUpsertCacheMut       sync.RWMutex
	jobSeekerFavUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var jobSeekerFavBeforeInsertHooks []JobSeekerFavHook
var jobSeekerFavBeforeUpdateHooks []JobSeekerFavHook
var jobSeekerFavBeforeDeleteHooks []JobSeekerFavHook
var jobSeekerFavBeforeUpsertHooks []JobSeekerFavHook

var jobSeekerFavAfterInsertHooks []JobSeekerFavHook
var jobSeekerFavAfterSelectHooks []JobSeekerFavHook
var jobSeekerFavAfterUpdateHooks []JobSeekerFavHook
var jobSeekerFavAfterDeleteHooks []JobSeekerFavHook
var jobSeekerFavAfterUpsertHooks []JobSeekerFavHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *JobSeekerFav) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerFavBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *JobSeekerFav) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerFavBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *JobSeekerFav) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerFavBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *JobSeekerFav) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerFavBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *JobSeekerFav) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerFavAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *JobSeekerFav) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerFavAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *JobSeekerFav) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerFavAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *JobSeekerFav) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerFavAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *JobSeekerFav) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSeekerFavAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddJobSeekerFavHook registers your hook function for all future operations.
func AddJobSeekerFavHook(hookPoint boil.HookPoint, jobSeekerFavHook JobSeekerFavHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		jobSeekerFavBeforeInsertHooks = append(jobSeekerFavBeforeInsertHooks, jobSeekerFavHook)
	case boil.BeforeUpdateHook:
		jobSeekerFavBeforeUpdateHooks = append(jobSeekerFavBeforeUpdateHooks, jobSeekerFavHook)
	case boil.BeforeDeleteHook:
		jobSeekerFavBeforeDeleteHooks = append(jobSeekerFavBeforeDeleteHooks, jobSeekerFavHook)
	case boil.BeforeUpsertHook:
		jobSeekerFavBeforeUpsertHooks = append(jobSeekerFavBeforeUpsertHooks, jobSeekerFavHook)
	case boil.AfterInsertHook:
		jobSeekerFavAfterInsertHooks = append(jobSeekerFavAfterInsertHooks, jobSeekerFavHook)
	case boil.AfterSelectHook:
		jobSeekerFavAfterSelectHooks = append(jobSeekerFavAfterSelectHooks, jobSeekerFavHook)
	case boil.AfterUpdateHook:
		jobSeekerFavAfterUpdateHooks = append(jobSeekerFavAfterUpdateHooks, jobSeekerFavHook)
	case boil.AfterDeleteHook:
		jobSeekerFavAfterDeleteHooks = append(jobSeekerFavAfterDeleteHooks, jobSeekerFavHook)
	case boil.AfterUpsertHook:
		jobSeekerFavAfterUpsertHooks = append(jobSeekerFavAfterUpsertHooks, jobSeekerFavHook)
	}
}

// One returns a single jobSeekerFav record from the query.
func (q jobSeekerFavQuery) One(ctx context.Context, exec boil.ContextExecutor) (*JobSeekerFav, error) {
	o := &JobSeekerFav{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for job_seeker_fav")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all JobSeekerFav records from the query.
func (q jobSeekerFavQuery) All(ctx context.Context, exec boil.ContextExecutor) (JobSeekerFavSlice, error) {
	var o []*JobSeekerFav

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to JobSeekerFav slice")
	}

	if len(jobSeekerFavAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all JobSeekerFav records in the query.
func (q jobSeekerFavQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count job_seeker_fav rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q jobSeekerFavQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if job_seeker_fav exists")
	}

	return count > 0, nil
}

// Job pointed to by the foreign key.
func (o *JobSeekerFav) Job(mods ...qm.QueryMod) jobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.JobID),
	}

	queryMods = append(queryMods, mods...)

	query := Jobs(queryMods...)
	queries.SetFrom(query.Query, "\"job\"")

	return query
}

// Person pointed to by the foreign key.
func (o *JobSeekerFav) Person(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PersonID),
	}

	queryMods = append(queryMods, mods...)

	query := People(queryMods...)
	queries.SetFrom(query.Query, "\"person\"")

	return query
}

// LoadJob allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jobSeekerFavL) LoadJob(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJobSeekerFav interface{}, mods queries.Applicator) error {
	var slice []*JobSeekerFav
	var object *JobSeekerFav

	if singular {
		object = maybeJobSeekerFav.(*JobSeekerFav)
	} else {
		slice = *maybeJobSeekerFav.(*[]*JobSeekerFav)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jobSeekerFavR{}
		}
		args = append(args, object.JobID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jobSeekerFavR{}
			}

			for _, a := range args {
				if a == obj.JobID {
					continue Outer
				}
			}

			args = append(args, obj.JobID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`job`),
		qm.WhereIn(`job.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Job")
	}

	var resultSlice []*Job
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Job")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for job")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for job")
	}

	if len(jobSeekerFavAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Job = foreign
		if foreign.R == nil {
			foreign.R = &jobR{}
		}
		foreign.R.JobSeekerFavs = append(foreign.R.JobSeekerFavs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.JobID == foreign.ID {
				local.R.Job = foreign
				if foreign.R == nil {
					foreign.R = &jobR{}
				}
				foreign.R.JobSeekerFavs = append(foreign.R.JobSeekerFavs, local)
				break
			}
		}
	}

	return nil
}

// LoadPerson allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jobSeekerFavL) LoadPerson(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJobSeekerFav interface{}, mods queries.Applicator) error {
	var slice []*JobSeekerFav
	var object *JobSeekerFav

	if singular {
		object = maybeJobSeekerFav.(*JobSeekerFav)
	} else {
		slice = *maybeJobSeekerFav.(*[]*JobSeekerFav)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jobSeekerFavR{}
		}
		args = append(args, object.PersonID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jobSeekerFavR{}
			}

			for _, a := range args {
				if a == obj.PersonID {
					continue Outer
				}
			}

			args = append(args, obj.PersonID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`person`),
		qm.WhereIn(`person.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for person")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for person")
	}

	if len(jobSeekerFavAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Person = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.JobSeekerFavs = append(foreign.R.JobSeekerFavs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PersonID == foreign.ID {
				local.R.Person = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.JobSeekerFavs = append(foreign.R.JobSeekerFavs, local)
				break
			}
		}
	}

	return nil
}

// SetJob of the jobSeekerFav to the related item.
// Sets o.R.Job to related.
// Adds o to related.R.JobSeekerFavs.
func (o *JobSeekerFav) SetJob(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Job) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"job_seeker_fav\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"job_id"}),
		strmangle.WhereClause("\"", "\"", 2, jobSeekerFavPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.JobID = related.ID
	if o.R == nil {
		o.R = &jobSeekerFavR{
			Job: related,
		}
	} else {
		o.R.Job = related
	}

	if related.R == nil {
		related.R = &jobR{
			JobSeekerFavs: JobSeekerFavSlice{o},
		}
	} else {
		related.R.JobSeekerFavs = append(related.R.JobSeekerFavs, o)
	}

	return nil
}

// SetPerson of the jobSeekerFav to the related item.
// Sets o.R.Person to related.
// Adds o to related.R.JobSeekerFavs.
func (o *JobSeekerFav) SetPerson(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"job_seeker_fav\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"person_id"}),
		strmangle.WhereClause("\"", "\"", 2, jobSeekerFavPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PersonID = related.ID
	if o.R == nil {
		o.R = &jobSeekerFavR{
			Person: related,
		}
	} else {
		o.R.Person = related
	}

	if related.R == nil {
		related.R = &personR{
			JobSeekerFavs: JobSeekerFavSlice{o},
		}
	} else {
		related.R.JobSeekerFavs = append(related.R.JobSeekerFavs, o)
	}

	return nil
}

// JobSeekerFavs retrieves all the records using an executor.
func JobSeekerFavs(mods ...qm.QueryMod) jobSeekerFavQuery {
	mods = append(mods, qm.From("\"job_seeker_fav\""))
	return jobSeekerFavQuery{NewQuery(mods...)}
}

// FindJobSeekerFav retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJobSeekerFav(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*JobSeekerFav, error) {
	jobSeekerFavObj := &JobSeekerFav{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"job_seeker_fav\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, jobSeekerFavObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from job_seeker_fav")
	}

	return jobSeekerFavObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *JobSeekerFav) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no job_seeker_fav provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jobSeekerFavColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	jobSeekerFavInsertCacheMut.RLock()
	cache, cached := jobSeekerFavInsertCache[key]
	jobSeekerFavInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			jobSeekerFavAllColumns,
			jobSeekerFavColumnsWithDefault,
			jobSeekerFavColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(jobSeekerFavType, jobSeekerFavMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(jobSeekerFavType, jobSeekerFavMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"job_seeker_fav\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"job_seeker_fav\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into job_seeker_fav")
	}

	if !cached {
		jobSeekerFavInsertCacheMut.Lock()
		jobSeekerFavInsertCache[key] = cache
		jobSeekerFavInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the JobSeekerFav.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *JobSeekerFav) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	jobSeekerFavUpdateCacheMut.RLock()
	cache, cached := jobSeekerFavUpdateCache[key]
	jobSeekerFavUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			jobSeekerFavAllColumns,
			jobSeekerFavPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update job_seeker_fav, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"job_seeker_fav\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, jobSeekerFavPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(jobSeekerFavType, jobSeekerFavMapping, append(wl, jobSeekerFavPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update job_seeker_fav row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for job_seeker_fav")
	}

	if !cached {
		jobSeekerFavUpdateCacheMut.Lock()
		jobSeekerFavUpdateCache[key] = cache
		jobSeekerFavUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q jobSeekerFavQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for job_seeker_fav")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for job_seeker_fav")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JobSeekerFavSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobSeekerFavPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"job_seeker_fav\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, jobSeekerFavPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in jobSeekerFav slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all jobSeekerFav")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *JobSeekerFav) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no job_seeker_fav provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jobSeekerFavColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	jobSeekerFavUpsertCacheMut.RLock()
	cache, cached := jobSeekerFavUpsertCache[key]
	jobSeekerFavUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			jobSeekerFavAllColumns,
			jobSeekerFavColumnsWithDefault,
			jobSeekerFavColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			jobSeekerFavAllColumns,
			jobSeekerFavPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert job_seeker_fav, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(jobSeekerFavPrimaryKeyColumns))
			copy(conflict, jobSeekerFavPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"job_seeker_fav\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(jobSeekerFavType, jobSeekerFavMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(jobSeekerFavType, jobSeekerFavMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert job_seeker_fav")
	}

	if !cached {
		jobSeekerFavUpsertCacheMut.Lock()
		jobSeekerFavUpsertCache[key] = cache
		jobSeekerFavUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single JobSeekerFav record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *JobSeekerFav) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no JobSeekerFav provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), jobSeekerFavPrimaryKeyMapping)
	sql := "DELETE FROM \"job_seeker_fav\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from job_seeker_fav")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for job_seeker_fav")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q jobSeekerFavQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no jobSeekerFavQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from job_seeker_fav")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for job_seeker_fav")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JobSeekerFavSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(jobSeekerFavBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobSeekerFavPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"job_seeker_fav\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jobSeekerFavPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from jobSeekerFav slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for job_seeker_fav")
	}

	if len(jobSeekerFavAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *JobSeekerFav) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJobSeekerFav(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JobSeekerFavSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JobSeekerFavSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobSeekerFavPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"job_seeker_fav\".* FROM \"job_seeker_fav\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jobSeekerFavPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in JobSeekerFavSlice")
	}

	*o = slice

	return nil
}

// JobSeekerFavExists checks if the JobSeekerFav row exists.
func JobSeekerFavExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"job_seeker_fav\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if job_seeker_fav exists")
	}

	return exists, nil
}
