// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// JobProviderFav is an object representing the database table.
type JobProviderFav struct {
	ID               string `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProviderPersonID string `boil:"provider_person_id" json:"provider_person_id" toml:"provider_person_id" yaml:"provider_person_id"`
	SeekerPersonID   string `boil:"seeker_person_id" json:"seeker_person_id" toml:"seeker_person_id" yaml:"seeker_person_id"`

	R *jobProviderFavR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L jobProviderFavL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JobProviderFavColumns = struct {
	ID               string
	ProviderPersonID string
	SeekerPersonID   string
}{
	ID:               "id",
	ProviderPersonID: "provider_person_id",
	SeekerPersonID:   "seeker_person_id",
}

// Generated where

var JobProviderFavWhere = struct {
	ID               whereHelperstring
	ProviderPersonID whereHelperstring
	SeekerPersonID   whereHelperstring
}{
	ID:               whereHelperstring{field: "\"job_provider_fav\".\"id\""},
	ProviderPersonID: whereHelperstring{field: "\"job_provider_fav\".\"provider_person_id\""},
	SeekerPersonID:   whereHelperstring{field: "\"job_provider_fav\".\"seeker_person_id\""},
}

// JobProviderFavRels is where relationship names are stored.
var JobProviderFavRels = struct {
	ProviderPerson string
	SeekerPerson   string
}{
	ProviderPerson: "ProviderPerson",
	SeekerPerson:   "SeekerPerson",
}

// jobProviderFavR is where relationships are stored.
type jobProviderFavR struct {
	ProviderPerson *Person `boil:"ProviderPerson" json:"ProviderPerson" toml:"ProviderPerson" yaml:"ProviderPerson"`
	SeekerPerson   *Person `boil:"SeekerPerson" json:"SeekerPerson" toml:"SeekerPerson" yaml:"SeekerPerson"`
}

// NewStruct creates a new relationship struct
func (*jobProviderFavR) NewStruct() *jobProviderFavR {
	return &jobProviderFavR{}
}

// jobProviderFavL is where Load methods for each relationship are stored.
type jobProviderFavL struct{}

var (
	jobProviderFavAllColumns            = []string{"id", "provider_person_id", "seeker_person_id"}
	jobProviderFavColumnsWithoutDefault = []string{"id", "provider_person_id", "seeker_person_id"}
	jobProviderFavColumnsWithDefault    = []string{}
	jobProviderFavPrimaryKeyColumns     = []string{"id"}
)

type (
	// JobProviderFavSlice is an alias for a slice of pointers to JobProviderFav.
	// This should generally be used opposed to []JobProviderFav.
	JobProviderFavSlice []*JobProviderFav
	// JobProviderFavHook is the signature for custom JobProviderFav hook methods
	JobProviderFavHook func(context.Context, boil.ContextExecutor, *JobProviderFav) error

	jobProviderFavQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	jobProviderFavType                 = reflect.TypeOf(&JobProviderFav{})
	jobProviderFavMapping              = queries.MakeStructMapping(jobProviderFavType)
	jobProviderFavPrimaryKeyMapping, _ = queries.BindMapping(jobProviderFavType, jobProviderFavMapping, jobProviderFavPrimaryKeyColumns)
	jobProviderFavInsertCacheMut       sync.RWMutex
	jobProviderFavInsertCache          = make(map[string]insertCache)
	jobProviderFavUpdateCacheMut       sync.RWMutex
	jobProviderFavUpdateCache          = make(map[string]updateCache)
	jobProviderFavUpsertCacheMut       sync.RWMutex
	jobProviderFavUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var jobProviderFavBeforeInsertHooks []JobProviderFavHook
var jobProviderFavBeforeUpdateHooks []JobProviderFavHook
var jobProviderFavBeforeDeleteHooks []JobProviderFavHook
var jobProviderFavBeforeUpsertHooks []JobProviderFavHook

var jobProviderFavAfterInsertHooks []JobProviderFavHook
var jobProviderFavAfterSelectHooks []JobProviderFavHook
var jobProviderFavAfterUpdateHooks []JobProviderFavHook
var jobProviderFavAfterDeleteHooks []JobProviderFavHook
var jobProviderFavAfterUpsertHooks []JobProviderFavHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *JobProviderFav) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobProviderFavBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *JobProviderFav) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobProviderFavBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *JobProviderFav) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobProviderFavBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *JobProviderFav) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobProviderFavBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *JobProviderFav) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobProviderFavAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *JobProviderFav) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobProviderFavAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *JobProviderFav) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobProviderFavAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *JobProviderFav) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobProviderFavAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *JobProviderFav) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobProviderFavAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddJobProviderFavHook registers your hook function for all future operations.
func AddJobProviderFavHook(hookPoint boil.HookPoint, jobProviderFavHook JobProviderFavHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		jobProviderFavBeforeInsertHooks = append(jobProviderFavBeforeInsertHooks, jobProviderFavHook)
	case boil.BeforeUpdateHook:
		jobProviderFavBeforeUpdateHooks = append(jobProviderFavBeforeUpdateHooks, jobProviderFavHook)
	case boil.BeforeDeleteHook:
		jobProviderFavBeforeDeleteHooks = append(jobProviderFavBeforeDeleteHooks, jobProviderFavHook)
	case boil.BeforeUpsertHook:
		jobProviderFavBeforeUpsertHooks = append(jobProviderFavBeforeUpsertHooks, jobProviderFavHook)
	case boil.AfterInsertHook:
		jobProviderFavAfterInsertHooks = append(jobProviderFavAfterInsertHooks, jobProviderFavHook)
	case boil.AfterSelectHook:
		jobProviderFavAfterSelectHooks = append(jobProviderFavAfterSelectHooks, jobProviderFavHook)
	case boil.AfterUpdateHook:
		jobProviderFavAfterUpdateHooks = append(jobProviderFavAfterUpdateHooks, jobProviderFavHook)
	case boil.AfterDeleteHook:
		jobProviderFavAfterDeleteHooks = append(jobProviderFavAfterDeleteHooks, jobProviderFavHook)
	case boil.AfterUpsertHook:
		jobProviderFavAfterUpsertHooks = append(jobProviderFavAfterUpsertHooks, jobProviderFavHook)
	}
}

// One returns a single jobProviderFav record from the query.
func (q jobProviderFavQuery) One(ctx context.Context, exec boil.ContextExecutor) (*JobProviderFav, error) {
	o := &JobProviderFav{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for job_provider_fav")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all JobProviderFav records from the query.
func (q jobProviderFavQuery) All(ctx context.Context, exec boil.ContextExecutor) (JobProviderFavSlice, error) {
	var o []*JobProviderFav

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to JobProviderFav slice")
	}

	if len(jobProviderFavAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all JobProviderFav records in the query.
func (q jobProviderFavQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count job_provider_fav rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q jobProviderFavQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if job_provider_fav exists")
	}

	return count > 0, nil
}

// ProviderPerson pointed to by the foreign key.
func (o *JobProviderFav) ProviderPerson(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProviderPersonID),
	}

	queryMods = append(queryMods, mods...)

	query := People(queryMods...)
	queries.SetFrom(query.Query, "\"person\"")

	return query
}

// SeekerPerson pointed to by the foreign key.
func (o *JobProviderFav) SeekerPerson(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SeekerPersonID),
	}

	queryMods = append(queryMods, mods...)

	query := People(queryMods...)
	queries.SetFrom(query.Query, "\"person\"")

	return query
}

// LoadProviderPerson allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jobProviderFavL) LoadProviderPerson(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJobProviderFav interface{}, mods queries.Applicator) error {
	var slice []*JobProviderFav
	var object *JobProviderFav

	if singular {
		object = maybeJobProviderFav.(*JobProviderFav)
	} else {
		slice = *maybeJobProviderFav.(*[]*JobProviderFav)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jobProviderFavR{}
		}
		args = append(args, object.ProviderPersonID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jobProviderFavR{}
			}

			for _, a := range args {
				if a == obj.ProviderPersonID {
					continue Outer
				}
			}

			args = append(args, obj.ProviderPersonID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`person`),
		qm.WhereIn(`person.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for person")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for person")
	}

	if len(jobProviderFavAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProviderPerson = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.ProviderPersonJobProviderFavs = append(foreign.R.ProviderPersonJobProviderFavs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProviderPersonID == foreign.ID {
				local.R.ProviderPerson = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.ProviderPersonJobProviderFavs = append(foreign.R.ProviderPersonJobProviderFavs, local)
				break
			}
		}
	}

	return nil
}

// LoadSeekerPerson allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jobProviderFavL) LoadSeekerPerson(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJobProviderFav interface{}, mods queries.Applicator) error {
	var slice []*JobProviderFav
	var object *JobProviderFav

	if singular {
		object = maybeJobProviderFav.(*JobProviderFav)
	} else {
		slice = *maybeJobProviderFav.(*[]*JobProviderFav)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jobProviderFavR{}
		}
		args = append(args, object.SeekerPersonID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jobProviderFavR{}
			}

			for _, a := range args {
				if a == obj.SeekerPersonID {
					continue Outer
				}
			}

			args = append(args, obj.SeekerPersonID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`person`),
		qm.WhereIn(`person.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for person")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for person")
	}

	if len(jobProviderFavAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SeekerPerson = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.SeekerPersonJobProviderFavs = append(foreign.R.SeekerPersonJobProviderFavs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SeekerPersonID == foreign.ID {
				local.R.SeekerPerson = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.SeekerPersonJobProviderFavs = append(foreign.R.SeekerPersonJobProviderFavs, local)
				break
			}
		}
	}

	return nil
}

// SetProviderPerson of the jobProviderFav to the related item.
// Sets o.R.ProviderPerson to related.
// Adds o to related.R.ProviderPersonJobProviderFavs.
func (o *JobProviderFav) SetProviderPerson(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"job_provider_fav\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"provider_person_id"}),
		strmangle.WhereClause("\"", "\"", 2, jobProviderFavPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProviderPersonID = related.ID
	if o.R == nil {
		o.R = &jobProviderFavR{
			ProviderPerson: related,
		}
	} else {
		o.R.ProviderPerson = related
	}

	if related.R == nil {
		related.R = &personR{
			ProviderPersonJobProviderFavs: JobProviderFavSlice{o},
		}
	} else {
		related.R.ProviderPersonJobProviderFavs = append(related.R.ProviderPersonJobProviderFavs, o)
	}

	return nil
}

// SetSeekerPerson of the jobProviderFav to the related item.
// Sets o.R.SeekerPerson to related.
// Adds o to related.R.SeekerPersonJobProviderFavs.
func (o *JobProviderFav) SetSeekerPerson(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"job_provider_fav\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"seeker_person_id"}),
		strmangle.WhereClause("\"", "\"", 2, jobProviderFavPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SeekerPersonID = related.ID
	if o.R == nil {
		o.R = &jobProviderFavR{
			SeekerPerson: related,
		}
	} else {
		o.R.SeekerPerson = related
	}

	if related.R == nil {
		related.R = &personR{
			SeekerPersonJobProviderFavs: JobProviderFavSlice{o},
		}
	} else {
		related.R.SeekerPersonJobProviderFavs = append(related.R.SeekerPersonJobProviderFavs, o)
	}

	return nil
}

// JobProviderFavs retrieves all the records using an executor.
func JobProviderFavs(mods ...qm.QueryMod) jobProviderFavQuery {
	mods = append(mods, qm.From("\"job_provider_fav\""))
	return jobProviderFavQuery{NewQuery(mods...)}
}

// FindJobProviderFav retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJobProviderFav(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*JobProviderFav, error) {
	jobProviderFavObj := &JobProviderFav{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"job_provider_fav\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, jobProviderFavObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from job_provider_fav")
	}

	return jobProviderFavObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *JobProviderFav) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no job_provider_fav provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jobProviderFavColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	jobProviderFavInsertCacheMut.RLock()
	cache, cached := jobProviderFavInsertCache[key]
	jobProviderFavInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			jobProviderFavAllColumns,
			jobProviderFavColumnsWithDefault,
			jobProviderFavColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(jobProviderFavType, jobProviderFavMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(jobProviderFavType, jobProviderFavMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"job_provider_fav\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"job_provider_fav\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into job_provider_fav")
	}

	if !cached {
		jobProviderFavInsertCacheMut.Lock()
		jobProviderFavInsertCache[key] = cache
		jobProviderFavInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the JobProviderFav.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *JobProviderFav) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	jobProviderFavUpdateCacheMut.RLock()
	cache, cached := jobProviderFavUpdateCache[key]
	jobProviderFavUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			jobProviderFavAllColumns,
			jobProviderFavPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update job_provider_fav, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"job_provider_fav\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, jobProviderFavPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(jobProviderFavType, jobProviderFavMapping, append(wl, jobProviderFavPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update job_provider_fav row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for job_provider_fav")
	}

	if !cached {
		jobProviderFavUpdateCacheMut.Lock()
		jobProviderFavUpdateCache[key] = cache
		jobProviderFavUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q jobProviderFavQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for job_provider_fav")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for job_provider_fav")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JobProviderFavSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobProviderFavPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"job_provider_fav\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, jobProviderFavPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in jobProviderFav slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all jobProviderFav")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *JobProviderFav) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no job_provider_fav provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jobProviderFavColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	jobProviderFavUpsertCacheMut.RLock()
	cache, cached := jobProviderFavUpsertCache[key]
	jobProviderFavUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			jobProviderFavAllColumns,
			jobProviderFavColumnsWithDefault,
			jobProviderFavColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			jobProviderFavAllColumns,
			jobProviderFavPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert job_provider_fav, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(jobProviderFavPrimaryKeyColumns))
			copy(conflict, jobProviderFavPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"job_provider_fav\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(jobProviderFavType, jobProviderFavMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(jobProviderFavType, jobProviderFavMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert job_provider_fav")
	}

	if !cached {
		jobProviderFavUpsertCacheMut.Lock()
		jobProviderFavUpsertCache[key] = cache
		jobProviderFavUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single JobProviderFav record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *JobProviderFav) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no JobProviderFav provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), jobProviderFavPrimaryKeyMapping)
	sql := "DELETE FROM \"job_provider_fav\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from job_provider_fav")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for job_provider_fav")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q jobProviderFavQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no jobProviderFavQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from job_provider_fav")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for job_provider_fav")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JobProviderFavSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(jobProviderFavBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobProviderFavPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"job_provider_fav\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jobProviderFavPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from jobProviderFav slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for job_provider_fav")
	}

	if len(jobProviderFavAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *JobProviderFav) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJobProviderFav(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JobProviderFavSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JobProviderFavSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobProviderFavPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"job_provider_fav\".* FROM \"job_provider_fav\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jobProviderFavPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in JobProviderFavSlice")
	}

	*o = slice

	return nil
}

// JobProviderFavExists checks if the JobProviderFav row exists.
func JobProviderFavExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"job_provider_fav\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if job_provider_fav exists")
	}

	return exists, nil
}
