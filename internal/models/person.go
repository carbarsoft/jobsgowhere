// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Person is an object representing the database table.
type Person struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	IamID       string      `boil:"iam_id" json:"iam_id" toml:"iam_id" yaml:"iam_id"`
	FirstName   null.String `boil:"first_name" json:"first_name,omitempty" toml:"first_name" yaml:"first_name,omitempty"`
	LastName    null.String `boil:"last_name" json:"last_name,omitempty" toml:"last_name" yaml:"last_name,omitempty"`
	AvatarURL   null.String `boil:"avatar_url" json:"avatar_url,omitempty" toml:"avatar_url" yaml:"avatar_url,omitempty"`
	Email       string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	IamProvider string      `boil:"iam_provider" json:"iam_provider" toml:"iam_provider" yaml:"iam_provider"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *personR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L personL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PersonColumns = struct {
	ID          string
	IamID       string
	FirstName   string
	LastName    string
	AvatarURL   string
	Email       string
	IamProvider string
	CreatedAt   string
}{
	ID:          "id",
	IamID:       "iam_id",
	FirstName:   "first_name",
	LastName:    "last_name",
	AvatarURL:   "avatar_url",
	Email:       "email",
	IamProvider: "iam_provider",
	CreatedAt:   "created_at",
}

// Generated where

var PersonWhere = struct {
	ID          whereHelperstring
	IamID       whereHelperstring
	FirstName   whereHelpernull_String
	LastName    whereHelpernull_String
	AvatarURL   whereHelpernull_String
	Email       whereHelperstring
	IamProvider whereHelperstring
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"person\".\"id\""},
	IamID:       whereHelperstring{field: "\"person\".\"iam_id\""},
	FirstName:   whereHelpernull_String{field: "\"person\".\"first_name\""},
	LastName:    whereHelpernull_String{field: "\"person\".\"last_name\""},
	AvatarURL:   whereHelpernull_String{field: "\"person\".\"avatar_url\""},
	Email:       whereHelperstring{field: "\"person\".\"email\""},
	IamProvider: whereHelperstring{field: "\"person\".\"iam_provider\""},
	CreatedAt:   whereHelpertime_Time{field: "\"person\".\"created_at\""},
}

// PersonRels is where relationship names are stored.
var PersonRels = struct {
	JobProvider                   string
	Jobs                          string
	ProviderPersonJobProviderFavs string
	SeekerPersonJobProviderFavs   string
	JobSeekers                    string
	JobSeekerFavs                 string
	PersonProfiles                string
}{
	JobProvider:                   "JobProvider",
	Jobs:                          "Jobs",
	ProviderPersonJobProviderFavs: "ProviderPersonJobProviderFavs",
	SeekerPersonJobProviderFavs:   "SeekerPersonJobProviderFavs",
	JobSeekers:                    "JobSeekers",
	JobSeekerFavs:                 "JobSeekerFavs",
	PersonProfiles:                "PersonProfiles",
}

// personR is where relationships are stored.
type personR struct {
	JobProvider                   *JobProvider        `boil:"JobProvider" json:"JobProvider" toml:"JobProvider" yaml:"JobProvider"`
	Jobs                          JobSlice            `boil:"Jobs" json:"Jobs" toml:"Jobs" yaml:"Jobs"`
	ProviderPersonJobProviderFavs JobProviderFavSlice `boil:"ProviderPersonJobProviderFavs" json:"ProviderPersonJobProviderFavs" toml:"ProviderPersonJobProviderFavs" yaml:"ProviderPersonJobProviderFavs"`
	SeekerPersonJobProviderFavs   JobProviderFavSlice `boil:"SeekerPersonJobProviderFavs" json:"SeekerPersonJobProviderFavs" toml:"SeekerPersonJobProviderFavs" yaml:"SeekerPersonJobProviderFavs"`
	JobSeekers                    JobSeekerSlice      `boil:"JobSeekers" json:"JobSeekers" toml:"JobSeekers" yaml:"JobSeekers"`
	JobSeekerFavs                 JobSeekerFavSlice   `boil:"JobSeekerFavs" json:"JobSeekerFavs" toml:"JobSeekerFavs" yaml:"JobSeekerFavs"`
	PersonProfiles                PersonProfileSlice  `boil:"PersonProfiles" json:"PersonProfiles" toml:"PersonProfiles" yaml:"PersonProfiles"`
}

// NewStruct creates a new relationship struct
func (*personR) NewStruct() *personR {
	return &personR{}
}

// personL is where Load methods for each relationship are stored.
type personL struct{}

var (
	personAllColumns            = []string{"id", "iam_id", "first_name", "last_name", "avatar_url", "email", "iam_provider", "created_at"}
	personColumnsWithoutDefault = []string{"id", "iam_id", "first_name", "last_name", "avatar_url", "email", "iam_provider", "created_at"}
	personColumnsWithDefault    = []string{}
	personPrimaryKeyColumns     = []string{"id"}
)

type (
	// PersonSlice is an alias for a slice of pointers to Person.
	// This should generally be used opposed to []Person.
	PersonSlice []*Person
	// PersonHook is the signature for custom Person hook methods
	PersonHook func(context.Context, boil.ContextExecutor, *Person) error

	personQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	personType                 = reflect.TypeOf(&Person{})
	personMapping              = queries.MakeStructMapping(personType)
	personPrimaryKeyMapping, _ = queries.BindMapping(personType, personMapping, personPrimaryKeyColumns)
	personInsertCacheMut       sync.RWMutex
	personInsertCache          = make(map[string]insertCache)
	personUpdateCacheMut       sync.RWMutex
	personUpdateCache          = make(map[string]updateCache)
	personUpsertCacheMut       sync.RWMutex
	personUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var personBeforeInsertHooks []PersonHook
var personBeforeUpdateHooks []PersonHook
var personBeforeDeleteHooks []PersonHook
var personBeforeUpsertHooks []PersonHook

var personAfterInsertHooks []PersonHook
var personAfterSelectHooks []PersonHook
var personAfterUpdateHooks []PersonHook
var personAfterDeleteHooks []PersonHook
var personAfterUpsertHooks []PersonHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Person) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Person) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Person) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Person) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Person) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Person) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Person) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Person) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Person) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPersonHook registers your hook function for all future operations.
func AddPersonHook(hookPoint boil.HookPoint, personHook PersonHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		personBeforeInsertHooks = append(personBeforeInsertHooks, personHook)
	case boil.BeforeUpdateHook:
		personBeforeUpdateHooks = append(personBeforeUpdateHooks, personHook)
	case boil.BeforeDeleteHook:
		personBeforeDeleteHooks = append(personBeforeDeleteHooks, personHook)
	case boil.BeforeUpsertHook:
		personBeforeUpsertHooks = append(personBeforeUpsertHooks, personHook)
	case boil.AfterInsertHook:
		personAfterInsertHooks = append(personAfterInsertHooks, personHook)
	case boil.AfterSelectHook:
		personAfterSelectHooks = append(personAfterSelectHooks, personHook)
	case boil.AfterUpdateHook:
		personAfterUpdateHooks = append(personAfterUpdateHooks, personHook)
	case boil.AfterDeleteHook:
		personAfterDeleteHooks = append(personAfterDeleteHooks, personHook)
	case boil.AfterUpsertHook:
		personAfterUpsertHooks = append(personAfterUpsertHooks, personHook)
	}
}

// One returns a single person record from the query.
func (q personQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Person, error) {
	o := &Person{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for person")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Person records from the query.
func (q personQuery) All(ctx context.Context, exec boil.ContextExecutor) (PersonSlice, error) {
	var o []*Person

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Person slice")
	}

	if len(personAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Person records in the query.
func (q personQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count person rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q personQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if person exists")
	}

	return count > 0, nil
}

// JobProvider pointed to by the foreign key.
func (o *Person) JobProvider(mods ...qm.QueryMod) jobProviderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"person_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := JobProviders(queryMods...)
	queries.SetFrom(query.Query, "\"job_provider\"")

	return query
}

// Jobs retrieves all the job's Jobs with an executor.
func (o *Person) Jobs(mods ...qm.QueryMod) jobQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"job\".\"person_id\"=?", o.ID),
	)

	query := Jobs(queryMods...)
	queries.SetFrom(query.Query, "\"job\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"job\".*"})
	}

	return query
}

// ProviderPersonJobProviderFavs retrieves all the job_provider_fav's JobProviderFavs with an executor via provider_person_id column.
func (o *Person) ProviderPersonJobProviderFavs(mods ...qm.QueryMod) jobProviderFavQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"job_provider_fav\".\"provider_person_id\"=?", o.ID),
	)

	query := JobProviderFavs(queryMods...)
	queries.SetFrom(query.Query, "\"job_provider_fav\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"job_provider_fav\".*"})
	}

	return query
}

// SeekerPersonJobProviderFavs retrieves all the job_provider_fav's JobProviderFavs with an executor via seeker_person_id column.
func (o *Person) SeekerPersonJobProviderFavs(mods ...qm.QueryMod) jobProviderFavQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"job_provider_fav\".\"seeker_person_id\"=?", o.ID),
	)

	query := JobProviderFavs(queryMods...)
	queries.SetFrom(query.Query, "\"job_provider_fav\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"job_provider_fav\".*"})
	}

	return query
}

// JobSeekers retrieves all the job_seeker's JobSeekers with an executor.
func (o *Person) JobSeekers(mods ...qm.QueryMod) jobSeekerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"job_seeker\".\"person_id\"=?", o.ID),
	)

	query := JobSeekers(queryMods...)
	queries.SetFrom(query.Query, "\"job_seeker\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"job_seeker\".*"})
	}

	return query
}

// JobSeekerFavs retrieves all the job_seeker_fav's JobSeekerFavs with an executor.
func (o *Person) JobSeekerFavs(mods ...qm.QueryMod) jobSeekerFavQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"job_seeker_fav\".\"person_id\"=?", o.ID),
	)

	query := JobSeekerFavs(queryMods...)
	queries.SetFrom(query.Query, "\"job_seeker_fav\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"job_seeker_fav\".*"})
	}

	return query
}

// PersonProfiles retrieves all the person_profile's PersonProfiles with an executor.
func (o *Person) PersonProfiles(mods ...qm.QueryMod) personProfileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"person_profile\".\"person_id\"=?", o.ID),
	)

	query := PersonProfiles(queryMods...)
	queries.SetFrom(query.Query, "\"person_profile\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"person_profile\".*"})
	}

	return query
}

// LoadJobProvider allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (personL) LoadJobProvider(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`job_provider`),
		qm.WhereIn(`job_provider.person_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load JobProvider")
	}

	var resultSlice []*JobProvider
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice JobProvider")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for job_provider")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for job_provider")
	}

	if len(personAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.JobProvider = foreign
		if foreign.R == nil {
			foreign.R = &jobProviderR{}
		}
		foreign.R.Person = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.PersonID {
				local.R.JobProvider = foreign
				if foreign.R == nil {
					foreign.R = &jobProviderR{}
				}
				foreign.R.Person = local
				break
			}
		}
	}

	return nil
}

// LoadJobs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadJobs(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`job`),
		qm.WhereIn(`job.person_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load job")
	}

	var resultSlice []*Job
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice job")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on job")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for job")
	}

	if len(jobAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Jobs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &jobR{}
			}
			foreign.R.Person = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PersonID {
				local.R.Jobs = append(local.R.Jobs, foreign)
				if foreign.R == nil {
					foreign.R = &jobR{}
				}
				foreign.R.Person = local
				break
			}
		}
	}

	return nil
}

// LoadProviderPersonJobProviderFavs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadProviderPersonJobProviderFavs(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`job_provider_fav`),
		qm.WhereIn(`job_provider_fav.provider_person_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load job_provider_fav")
	}

	var resultSlice []*JobProviderFav
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice job_provider_fav")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on job_provider_fav")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for job_provider_fav")
	}

	if len(jobProviderFavAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProviderPersonJobProviderFavs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &jobProviderFavR{}
			}
			foreign.R.ProviderPerson = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProviderPersonID {
				local.R.ProviderPersonJobProviderFavs = append(local.R.ProviderPersonJobProviderFavs, foreign)
				if foreign.R == nil {
					foreign.R = &jobProviderFavR{}
				}
				foreign.R.ProviderPerson = local
				break
			}
		}
	}

	return nil
}

// LoadSeekerPersonJobProviderFavs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadSeekerPersonJobProviderFavs(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`job_provider_fav`),
		qm.WhereIn(`job_provider_fav.seeker_person_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load job_provider_fav")
	}

	var resultSlice []*JobProviderFav
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice job_provider_fav")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on job_provider_fav")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for job_provider_fav")
	}

	if len(jobProviderFavAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SeekerPersonJobProviderFavs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &jobProviderFavR{}
			}
			foreign.R.SeekerPerson = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SeekerPersonID {
				local.R.SeekerPersonJobProviderFavs = append(local.R.SeekerPersonJobProviderFavs, foreign)
				if foreign.R == nil {
					foreign.R = &jobProviderFavR{}
				}
				foreign.R.SeekerPerson = local
				break
			}
		}
	}

	return nil
}

// LoadJobSeekers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadJobSeekers(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`job_seeker`),
		qm.WhereIn(`job_seeker.person_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load job_seeker")
	}

	var resultSlice []*JobSeeker
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice job_seeker")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on job_seeker")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for job_seeker")
	}

	if len(jobSeekerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.JobSeekers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &jobSeekerR{}
			}
			foreign.R.Person = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PersonID {
				local.R.JobSeekers = append(local.R.JobSeekers, foreign)
				if foreign.R == nil {
					foreign.R = &jobSeekerR{}
				}
				foreign.R.Person = local
				break
			}
		}
	}

	return nil
}

// LoadJobSeekerFavs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadJobSeekerFavs(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`job_seeker_fav`),
		qm.WhereIn(`job_seeker_fav.person_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load job_seeker_fav")
	}

	var resultSlice []*JobSeekerFav
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice job_seeker_fav")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on job_seeker_fav")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for job_seeker_fav")
	}

	if len(jobSeekerFavAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.JobSeekerFavs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &jobSeekerFavR{}
			}
			foreign.R.Person = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PersonID {
				local.R.JobSeekerFavs = append(local.R.JobSeekerFavs, foreign)
				if foreign.R == nil {
					foreign.R = &jobSeekerFavR{}
				}
				foreign.R.Person = local
				break
			}
		}
	}

	return nil
}

// LoadPersonProfiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadPersonProfiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`person_profile`),
		qm.WhereIn(`person_profile.person_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load person_profile")
	}

	var resultSlice []*PersonProfile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice person_profile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on person_profile")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for person_profile")
	}

	if len(personProfileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PersonProfiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &personProfileR{}
			}
			foreign.R.Person = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PersonID {
				local.R.PersonProfiles = append(local.R.PersonProfiles, foreign)
				if foreign.R == nil {
					foreign.R = &personProfileR{}
				}
				foreign.R.Person = local
				break
			}
		}
	}

	return nil
}

// SetJobProvider of the person to the related item.
// Sets o.R.JobProvider to related.
// Adds o to related.R.Person.
func (o *Person) SetJobProvider(ctx context.Context, exec boil.ContextExecutor, insert bool, related *JobProvider) error {
	var err error

	if insert {
		related.PersonID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"job_provider\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"person_id"}),
			strmangle.WhereClause("\"", "\"", 2, jobProviderPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.PersonID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.PersonID = o.ID

	}

	if o.R == nil {
		o.R = &personR{
			JobProvider: related,
		}
	} else {
		o.R.JobProvider = related
	}

	if related.R == nil {
		related.R = &jobProviderR{
			Person: o,
		}
	} else {
		related.R.Person = o
	}
	return nil
}

// AddJobs adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.Jobs.
// Sets related.R.Person appropriately.
func (o *Person) AddJobs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Job) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PersonID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"job\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"person_id"}),
				strmangle.WhereClause("\"", "\"", 2, jobPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PersonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &personR{
			Jobs: related,
		}
	} else {
		o.R.Jobs = append(o.R.Jobs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &jobR{
				Person: o,
			}
		} else {
			rel.R.Person = o
		}
	}
	return nil
}

// AddProviderPersonJobProviderFavs adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.ProviderPersonJobProviderFavs.
// Sets related.R.ProviderPerson appropriately.
func (o *Person) AddProviderPersonJobProviderFavs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*JobProviderFav) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProviderPersonID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"job_provider_fav\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"provider_person_id"}),
				strmangle.WhereClause("\"", "\"", 2, jobProviderFavPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProviderPersonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &personR{
			ProviderPersonJobProviderFavs: related,
		}
	} else {
		o.R.ProviderPersonJobProviderFavs = append(o.R.ProviderPersonJobProviderFavs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &jobProviderFavR{
				ProviderPerson: o,
			}
		} else {
			rel.R.ProviderPerson = o
		}
	}
	return nil
}

// AddSeekerPersonJobProviderFavs adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.SeekerPersonJobProviderFavs.
// Sets related.R.SeekerPerson appropriately.
func (o *Person) AddSeekerPersonJobProviderFavs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*JobProviderFav) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SeekerPersonID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"job_provider_fav\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seeker_person_id"}),
				strmangle.WhereClause("\"", "\"", 2, jobProviderFavPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SeekerPersonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &personR{
			SeekerPersonJobProviderFavs: related,
		}
	} else {
		o.R.SeekerPersonJobProviderFavs = append(o.R.SeekerPersonJobProviderFavs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &jobProviderFavR{
				SeekerPerson: o,
			}
		} else {
			rel.R.SeekerPerson = o
		}
	}
	return nil
}

// AddJobSeekers adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.JobSeekers.
// Sets related.R.Person appropriately.
func (o *Person) AddJobSeekers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*JobSeeker) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PersonID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"job_seeker\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"person_id"}),
				strmangle.WhereClause("\"", "\"", 2, jobSeekerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PersonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &personR{
			JobSeekers: related,
		}
	} else {
		o.R.JobSeekers = append(o.R.JobSeekers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &jobSeekerR{
				Person: o,
			}
		} else {
			rel.R.Person = o
		}
	}
	return nil
}

// AddJobSeekerFavs adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.JobSeekerFavs.
// Sets related.R.Person appropriately.
func (o *Person) AddJobSeekerFavs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*JobSeekerFav) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PersonID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"job_seeker_fav\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"person_id"}),
				strmangle.WhereClause("\"", "\"", 2, jobSeekerFavPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PersonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &personR{
			JobSeekerFavs: related,
		}
	} else {
		o.R.JobSeekerFavs = append(o.R.JobSeekerFavs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &jobSeekerFavR{
				Person: o,
			}
		} else {
			rel.R.Person = o
		}
	}
	return nil
}

// AddPersonProfiles adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.PersonProfiles.
// Sets related.R.Person appropriately.
func (o *Person) AddPersonProfiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PersonProfile) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PersonID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"person_profile\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"person_id"}),
				strmangle.WhereClause("\"", "\"", 2, personProfilePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PersonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &personR{
			PersonProfiles: related,
		}
	} else {
		o.R.PersonProfiles = append(o.R.PersonProfiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &personProfileR{
				Person: o,
			}
		} else {
			rel.R.Person = o
		}
	}
	return nil
}

// People retrieves all the records using an executor.
func People(mods ...qm.QueryMod) personQuery {
	mods = append(mods, qm.From("\"person\""))
	return personQuery{NewQuery(mods...)}
}

// FindPerson retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPerson(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Person, error) {
	personObj := &Person{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"person\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, personObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from person")
	}

	return personObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Person) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no person provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(personColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	personInsertCacheMut.RLock()
	cache, cached := personInsertCache[key]
	personInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			personAllColumns,
			personColumnsWithDefault,
			personColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(personType, personMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(personType, personMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"person\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"person\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into person")
	}

	if !cached {
		personInsertCacheMut.Lock()
		personInsertCache[key] = cache
		personInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Person.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Person) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	personUpdateCacheMut.RLock()
	cache, cached := personUpdateCache[key]
	personUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			personAllColumns,
			personPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update person, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"person\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, personPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(personType, personMapping, append(wl, personPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update person row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for person")
	}

	if !cached {
		personUpdateCacheMut.Lock()
		personUpdateCache[key] = cache
		personUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q personQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for person")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for person")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PersonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"person\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, personPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in person slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all person")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Person) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no person provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(personColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	personUpsertCacheMut.RLock()
	cache, cached := personUpsertCache[key]
	personUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			personAllColumns,
			personColumnsWithDefault,
			personColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			personAllColumns,
			personPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert person, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(personPrimaryKeyColumns))
			copy(conflict, personPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"person\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(personType, personMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(personType, personMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert person")
	}

	if !cached {
		personUpsertCacheMut.Lock()
		personUpsertCache[key] = cache
		personUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Person record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Person) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Person provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), personPrimaryKeyMapping)
	sql := "DELETE FROM \"person\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from person")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for person")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q personQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no personQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from person")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for person")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PersonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(personBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"person\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, personPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from person slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for person")
	}

	if len(personAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Person) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPerson(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PersonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PersonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"person\".* FROM \"person\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, personPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PersonSlice")
	}

	*o = slice

	return nil
}

// PersonExists checks if the Person row exists.
func PersonExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"person\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if person exists")
	}

	return exists, nil
}
