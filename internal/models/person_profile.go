// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PersonProfile is an object representing the database table.
type PersonProfile struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	PersonID    string      `boil:"person_id" json:"person_id" toml:"person_id" yaml:"person_id"`
	ProfileURL  string      `boil:"profile_url" json:"profile_url" toml:"profile_url" yaml:"profile_url"`
	Headline    null.String `boil:"headline" json:"headline,omitempty" toml:"headline" yaml:"headline,omitempty"`
	Website     null.String `boil:"website" json:"website,omitempty" toml:"website" yaml:"website,omitempty"`
	Company     null.String `boil:"company" json:"company,omitempty" toml:"company" yaml:"company,omitempty"`
	ProfileType null.String `boil:"profile_type" json:"profile_type,omitempty" toml:"profile_type" yaml:"profile_type,omitempty"`

	R *personProfileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L personProfileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PersonProfileColumns = struct {
	ID          string
	PersonID    string
	ProfileURL  string
	Headline    string
	Website     string
	Company     string
	ProfileType string
}{
	ID:          "id",
	PersonID:    "person_id",
	ProfileURL:  "profile_url",
	Headline:    "headline",
	Website:     "website",
	Company:     "company",
	ProfileType: "profile_type",
}

// Generated where

var PersonProfileWhere = struct {
	ID          whereHelperstring
	PersonID    whereHelperstring
	ProfileURL  whereHelperstring
	Headline    whereHelpernull_String
	Website     whereHelpernull_String
	Company     whereHelpernull_String
	ProfileType whereHelpernull_String
}{
	ID:          whereHelperstring{field: "\"person_profile\".\"id\""},
	PersonID:    whereHelperstring{field: "\"person_profile\".\"person_id\""},
	ProfileURL:  whereHelperstring{field: "\"person_profile\".\"profile_url\""},
	Headline:    whereHelpernull_String{field: "\"person_profile\".\"headline\""},
	Website:     whereHelpernull_String{field: "\"person_profile\".\"website\""},
	Company:     whereHelpernull_String{field: "\"person_profile\".\"company\""},
	ProfileType: whereHelpernull_String{field: "\"person_profile\".\"profile_type\""},
}

// PersonProfileRels is where relationship names are stored.
var PersonProfileRels = struct {
	Person string
}{
	Person: "Person",
}

// personProfileR is where relationships are stored.
type personProfileR struct {
	Person *Person `boil:"Person" json:"Person" toml:"Person" yaml:"Person"`
}

// NewStruct creates a new relationship struct
func (*personProfileR) NewStruct() *personProfileR {
	return &personProfileR{}
}

// personProfileL is where Load methods for each relationship are stored.
type personProfileL struct{}

var (
	personProfileAllColumns            = []string{"id", "person_id", "profile_url", "headline", "website", "company", "profile_type"}
	personProfileColumnsWithoutDefault = []string{"id", "person_id", "profile_url", "headline", "website", "company", "profile_type"}
	personProfileColumnsWithDefault    = []string{}
	personProfilePrimaryKeyColumns     = []string{"id"}
)

type (
	// PersonProfileSlice is an alias for a slice of pointers to PersonProfile.
	// This should generally be used opposed to []PersonProfile.
	PersonProfileSlice []*PersonProfile
	// PersonProfileHook is the signature for custom PersonProfile hook methods
	PersonProfileHook func(context.Context, boil.ContextExecutor, *PersonProfile) error

	personProfileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	personProfileType                 = reflect.TypeOf(&PersonProfile{})
	personProfileMapping              = queries.MakeStructMapping(personProfileType)
	personProfilePrimaryKeyMapping, _ = queries.BindMapping(personProfileType, personProfileMapping, personProfilePrimaryKeyColumns)
	personProfileInsertCacheMut       sync.RWMutex
	personProfileInsertCache          = make(map[string]insertCache)
	personProfileUpdateCacheMut       sync.RWMutex
	personProfileUpdateCache          = make(map[string]updateCache)
	personProfileUpsertCacheMut       sync.RWMutex
	personProfileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var personProfileBeforeInsertHooks []PersonProfileHook
var personProfileBeforeUpdateHooks []PersonProfileHook
var personProfileBeforeDeleteHooks []PersonProfileHook
var personProfileBeforeUpsertHooks []PersonProfileHook

var personProfileAfterInsertHooks []PersonProfileHook
var personProfileAfterSelectHooks []PersonProfileHook
var personProfileAfterUpdateHooks []PersonProfileHook
var personProfileAfterDeleteHooks []PersonProfileHook
var personProfileAfterUpsertHooks []PersonProfileHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PersonProfile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personProfileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PersonProfile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personProfileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PersonProfile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personProfileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PersonProfile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personProfileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PersonProfile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personProfileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PersonProfile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personProfileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PersonProfile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personProfileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PersonProfile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personProfileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PersonProfile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personProfileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPersonProfileHook registers your hook function for all future operations.
func AddPersonProfileHook(hookPoint boil.HookPoint, personProfileHook PersonProfileHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		personProfileBeforeInsertHooks = append(personProfileBeforeInsertHooks, personProfileHook)
	case boil.BeforeUpdateHook:
		personProfileBeforeUpdateHooks = append(personProfileBeforeUpdateHooks, personProfileHook)
	case boil.BeforeDeleteHook:
		personProfileBeforeDeleteHooks = append(personProfileBeforeDeleteHooks, personProfileHook)
	case boil.BeforeUpsertHook:
		personProfileBeforeUpsertHooks = append(personProfileBeforeUpsertHooks, personProfileHook)
	case boil.AfterInsertHook:
		personProfileAfterInsertHooks = append(personProfileAfterInsertHooks, personProfileHook)
	case boil.AfterSelectHook:
		personProfileAfterSelectHooks = append(personProfileAfterSelectHooks, personProfileHook)
	case boil.AfterUpdateHook:
		personProfileAfterUpdateHooks = append(personProfileAfterUpdateHooks, personProfileHook)
	case boil.AfterDeleteHook:
		personProfileAfterDeleteHooks = append(personProfileAfterDeleteHooks, personProfileHook)
	case boil.AfterUpsertHook:
		personProfileAfterUpsertHooks = append(personProfileAfterUpsertHooks, personProfileHook)
	}
}

// One returns a single personProfile record from the query.
func (q personProfileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PersonProfile, error) {
	o := &PersonProfile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for person_profile")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PersonProfile records from the query.
func (q personProfileQuery) All(ctx context.Context, exec boil.ContextExecutor) (PersonProfileSlice, error) {
	var o []*PersonProfile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PersonProfile slice")
	}

	if len(personProfileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PersonProfile records in the query.
func (q personProfileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count person_profile rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q personProfileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if person_profile exists")
	}

	return count > 0, nil
}

// Person pointed to by the foreign key.
func (o *PersonProfile) Person(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PersonID),
	}

	queryMods = append(queryMods, mods...)

	query := People(queryMods...)
	queries.SetFrom(query.Query, "\"person\"")

	return query
}

// LoadPerson allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (personProfileL) LoadPerson(ctx context.Context, e boil.ContextExecutor, singular bool, maybePersonProfile interface{}, mods queries.Applicator) error {
	var slice []*PersonProfile
	var object *PersonProfile

	if singular {
		object = maybePersonProfile.(*PersonProfile)
	} else {
		slice = *maybePersonProfile.(*[]*PersonProfile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personProfileR{}
		}
		args = append(args, object.PersonID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personProfileR{}
			}

			for _, a := range args {
				if a == obj.PersonID {
					continue Outer
				}
			}

			args = append(args, obj.PersonID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`person`),
		qm.WhereIn(`person.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for person")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for person")
	}

	if len(personProfileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Person = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.PersonProfiles = append(foreign.R.PersonProfiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PersonID == foreign.ID {
				local.R.Person = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.PersonProfiles = append(foreign.R.PersonProfiles, local)
				break
			}
		}
	}

	return nil
}

// SetPerson of the personProfile to the related item.
// Sets o.R.Person to related.
// Adds o to related.R.PersonProfiles.
func (o *PersonProfile) SetPerson(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"person_profile\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"person_id"}),
		strmangle.WhereClause("\"", "\"", 2, personProfilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PersonID = related.ID
	if o.R == nil {
		o.R = &personProfileR{
			Person: related,
		}
	} else {
		o.R.Person = related
	}

	if related.R == nil {
		related.R = &personR{
			PersonProfiles: PersonProfileSlice{o},
		}
	} else {
		related.R.PersonProfiles = append(related.R.PersonProfiles, o)
	}

	return nil
}

// PersonProfiles retrieves all the records using an executor.
func PersonProfiles(mods ...qm.QueryMod) personProfileQuery {
	mods = append(mods, qm.From("\"person_profile\""))
	return personProfileQuery{NewQuery(mods...)}
}

// FindPersonProfile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPersonProfile(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PersonProfile, error) {
	personProfileObj := &PersonProfile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"person_profile\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, personProfileObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from person_profile")
	}

	return personProfileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PersonProfile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no person_profile provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(personProfileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	personProfileInsertCacheMut.RLock()
	cache, cached := personProfileInsertCache[key]
	personProfileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			personProfileAllColumns,
			personProfileColumnsWithDefault,
			personProfileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(personProfileType, personProfileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(personProfileType, personProfileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"person_profile\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"person_profile\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into person_profile")
	}

	if !cached {
		personProfileInsertCacheMut.Lock()
		personProfileInsertCache[key] = cache
		personProfileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PersonProfile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PersonProfile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	personProfileUpdateCacheMut.RLock()
	cache, cached := personProfileUpdateCache[key]
	personProfileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			personProfileAllColumns,
			personProfilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update person_profile, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"person_profile\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, personProfilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(personProfileType, personProfileMapping, append(wl, personProfilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update person_profile row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for person_profile")
	}

	if !cached {
		personProfileUpdateCacheMut.Lock()
		personProfileUpdateCache[key] = cache
		personProfileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q personProfileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for person_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for person_profile")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PersonProfileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"person_profile\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, personProfilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in personProfile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all personProfile")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PersonProfile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no person_profile provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(personProfileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	personProfileUpsertCacheMut.RLock()
	cache, cached := personProfileUpsertCache[key]
	personProfileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			personProfileAllColumns,
			personProfileColumnsWithDefault,
			personProfileColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			personProfileAllColumns,
			personProfilePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert person_profile, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(personProfilePrimaryKeyColumns))
			copy(conflict, personProfilePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"person_profile\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(personProfileType, personProfileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(personProfileType, personProfileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert person_profile")
	}

	if !cached {
		personProfileUpsertCacheMut.Lock()
		personProfileUpsertCache[key] = cache
		personProfileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PersonProfile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PersonProfile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PersonProfile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), personProfilePrimaryKeyMapping)
	sql := "DELETE FROM \"person_profile\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from person_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for person_profile")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q personProfileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no personProfileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from person_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for person_profile")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PersonProfileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(personProfileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"person_profile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, personProfilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from personProfile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for person_profile")
	}

	if len(personProfileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PersonProfile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPersonProfile(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PersonProfileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PersonProfileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"person_profile\".* FROM \"person_profile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, personProfilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PersonProfileSlice")
	}

	*o = slice

	return nil
}

// PersonProfileExists checks if the PersonProfile row exists.
func PersonProfileExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"person_profile\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if person_profile exists")
	}

	return exists, nil
}
